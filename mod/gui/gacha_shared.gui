types gacha_popups {

    type gacha_ball = widget {
        block "gacha_context" {}
        block "gacha_size" {
            size = { 256 256 }
        }

        gacha_ball_open = {
            blockoverride "gacha_visibility" {
                visible = "[IsGachaRarity('gacha_rarity_common')]"
            }
            blockoverride "color_texture" {
                texture = "gfx/interface/gacha/balls/gacha_ball_gold.dds"
            }
        }
        gacha_ball_open = {
            blockoverride "gacha_visibility" {
                visible = "[IsGachaRarity('gacha_rarity_uncommon')]"
            }
            blockoverride "color_texture" {
                texture = "gfx/interface/gacha/balls/gacha_ball_green.dds"
            }
        }
        gacha_ball_open = {
            blockoverride "gacha_visibility" {
                visible = "[IsGachaRarity('gacha_rarity_rare')]"
            }
            blockoverride "color_texture" {
                texture = "gfx/interface/gacha/balls/gacha_ball_blue.dds"
            }
        }
        gacha_ball_open = {
            blockoverride "gacha_visibility" {
                visible = "[IsGachaRarity('gacha_rarity_epic')]"
            }
            blockoverride "color_texture" {
                texture = "gfx/interface/gacha/balls/gacha_ball_purple.dds"
            }
        }
        gacha_ball_open = {
            blockoverride "gacha_visibility" {
                visible = "[IsGachaRarity('gacha_rarity_legendary')]"
            }
            blockoverride "color_texture" {
                texture = "gfx/interface/gacha/balls/gacha_ball_red.dds"
            }
        }

        gacha_type_icon = {}
    }

    type gacha_ball_open = icon {
        block "gacha_visibility" {
            visible = no
        }
        block "color_texture" {
            texture = "gfx/interface/gacha/balls/gacha_ball_gold.dds"
        }
        size = { 100% 100% }
        block "glow" {
            background = {
                block "glow_visibility" {
                    visible = yes
                }
                margin = { 40 30 }
                using = gacha_rotate_glow_animation
            }
        }
    }

    type gacha_rarity_text = vbox {
        layoutpolicy_horizontal = expanding
        textbox = {
            block "rarity_text_attributes" {}
            visible = "[Not(Scope.IsSet)]"
            text = gacha_rarity_unknown
        }
        textbox = {
            block "rarity_text_attributes" {}
            visible = "[IsGachaRarity('gacha_rarity_common')]"
            text = gacha_rarity_common
        }
        textbox = {
            block "rarity_text_attributes" {}
            visible = "[IsGachaRarity('gacha_rarity_uncommon')]"
            text = gacha_rarity_uncommon
        }
        textbox = {
            block "rarity_text_attributes" {}
            visible = "[IsGachaRarity('gacha_rarity_rare')]"
            text = gacha_rarity_rare
        }
        textbox = {
            block "rarity_text_attributes" {}
            visible = "[IsGachaRarity('gacha_rarity_epic')]"
            text = gacha_rarity_epic
        }
        textbox = {
            block "rarity_text_attributes" {}
            visible = "[IsGachaRarity('gacha_rarity_legendary')]"
            text = gacha_rarity_legendary
        }
    }

    type gacha_active = widget {
        block "gacha_context" {}
        block "gacha_size" {
            size = { 256 256 }
        }
        icon = {
            visible = "[Not(Scope.IsSet)]"
            size = { 100% 100% }
            texture = "gfx/interface/gacha/balls/gacha_ball_unknown.dds"
        }
        gacha_ball = {
            visible = "[Scope.IsSet]"
            blockoverride "gacha_size" {
                size = { 100% 100% }
            }
        }
    }

    type gacha_active_button = button {
        block "gacha_button_context" {
            datacontext = "[GetScriptedGui('sgui_gacha_activate_one')]"
        }
        onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(Country.MakeScope).End)]"
        block "gacha_button_additional_onclick" {}
        block "gacha_size" {
            size = { 256 256 }
        }
        gacha_active = {}
    }


    type gacha_popup_window = window {
        using = clickthrough_blocker
        filter_mouse = all
        movable = yes
        allow_outside = yes
        parentanchor = center

        block "popup_size" {
            size = { 900 605 }
        }

        block "popup_visibility" {
            visible = no
        }

        widget = {
            size = { 100% 100% }

            background = {
                texture = "gfx/interface/backgrounds/popup_bg.dds"
                spriteType = Corneredstretched
                spriteborder = { 90 90 }
                texture_density = 2

                modify_texture = {
                    texture = "gfx/interface/backgrounds/default_bg_shading.dds"
                    spriteType = Corneredstretched
                    spriteborder = { 0 0 }
                    blend_mode = overlay
                }
                modify_texture = {
                    using = texture_velvet
                }
            }
        }

        # Header
        widget = {
            size = { 100% 82 }

            popup_top_header = {}

            textbox = {
                position = { 0 24 }
                size = { 75% 40 }
                block "popup_title" {
                    raw_text = "#r popup_title#!"
                }
                elide = right
                fontsize_min = 14
                parentanchor = hcenter
                align = hcenter|nobaseline
                using = header_font
                using = header_font_size
                default_format = "#header"
            }
        }

        block "popup_content" {}

        # Frame
        popup_bg_frame = {}

        # Close button
        button_icon_round = {
            parentanchor = top|right
            size = { 42 42 }
            position = { -5 13 }

            block "popup_button_onclick" {}
            input_action = "back"
            shortcut = "close_window"

            blockoverride "icon" {
                texture = "gfx/interface/buttons/button_icons/close.dds"
            }
            blockoverride "icon_size" {
                size = { 100% 100% }
            }
        }
    }

}

template gacha_rotate_glow_animation {
    texture = "gfx/interface/animation/rotate_glow2.dds"
    alwaystransparent = yes
    ignore_in_debug_draw = yes

    modify_texture = {
        name = mask_left
        texture = "gfx/interface/animation/rotate_glow_mask.dds"
        blend_mode = alphamultiply
    }
    modify_texture = {
        name = mask_right
        texture = "gfx/interface/animation/rotate_glow_mask2.dds"
        blend_mode = alphamultiply
    }
    modify_texture = {
        name = overlay_left
        texture = "gfx/interface/animation/rotate_glow_overlay.dds"
        blend_mode = colordodge
        alpha = 0.3
    }
    modify_texture = {
        name = overlay_right
        texture = "gfx/interface/animation/rotate_glow_overlay.dds"
        blend_mode = colordodge
        alpha = 0.3
    }

    ### mask rotating left
    state = {
        trigger_on_create = yes
        name = left
        next = left2
        duration = 0.0
        modify_texture = {
            name = mask_left
            rotate_uv = 0
        }
    }
    state = {
        name = left2
        next = left
        duration = 20.0
        modify_texture = {
            name = mask_left
            rotate_uv = 360
        }
    }

    #### mask rotating right
    state = {
        trigger_on_create = yes
        name = right
        next = right2
        duration = 0.0
        modify_texture = {
            name = mask_right
            rotate_uv = 0
        }
    }
    state = {
        name = right2
        next = right
        duration = 30.0
        modify_texture = {
            name = mask_right
            rotate_uv = -360
        }
    }

    ### overlay rotating left
    state = {
        trigger_on_create = yes
        name = overlay_left
        next = overlay_left2
        duration = 0.0
        modify_texture = {
            name = overlay_left
            rotate_uv = 0
        }
    }
    state = {
        name = overlay_left2
        next = overlay_left
        duration = 15.0
        modify_texture = {
            name = overlay_left
            rotate_uv = 360
        }
    }
    ### overlay rotating right
    state = {
        trigger_on_create = yes
        name = overlay_right
        next = overlay_right2
        duration = 0.0
        modify_texture = {
            name = overlay_right
            rotate_uv = 0
        }
    }
    state = {
        name = overlay_right2
        next = overlay_right
        duration = 30.0
        modify_texture = {
            name = overlay_right
            rotate_uv = -360
        }
    }
}